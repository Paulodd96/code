import os
import numpy as np
import struct
import matplotlib.pyplot as plt
from time import time
from neuralnet import NeuralNetMLP


def load_mnist(path, kind='train'):
    labels_path = os.path.join(path, '%s-label-idx1-ubyte' % kind)
    images_path = os.path.join(path, '%s-images-idx3-ubyte' % kind)

    with open(labels_path, 'rb') as lbpath:
        magic, n = struct.unpack('>II', lbpath.read(8))
        labels = np.fromfile(lbpath, dtype=np.uint8)

    with open(images_path, 'rb') as imgpath:
        magic, num, rows, cols = struct.unpack(">IIII", imgpath.read(16))
        images = np.fromfile(imgpath, dtype=np.uint8).reshape(len(labels), 784)

    return images, labels

X_train, y_train = load_mnist('mnist', kind='train')
print('Rows: %d, columns: %d' % (X_train.shape[0], X_train.shape[1]))
X_test, y_test = load_mnist('mnist', kind='t10k')
print('Rows: %d, columns: %d' % (X_test.shape[0], X_test.shape[1]))
fig, ax = plt.subplots(nrows=2, ncols=5, sharex=True, sharey=True,)
ax = ax.flatten()
for i in range(10):
    img = X_train[y_train == i][0].reshape(28, 28)
    ax[i].imshow(img, cmap='Greys', interpolation='nearest')
ax[0].set_xticks([])
ax[0].set_yticks([])
plt.tight_layout()
plt.show()

fig, ax = plt.subplots(nrows=1, ncols=10, sharex=True, sharey=True,)
ax = ax.flatten()
for i in range(10):
    img = X_train[y_train == 6][i].reshape(28, 28)
    ax[i].imshow(img, cmap='Greys', interpolation='nearest')
ax[0].set_xticks([])
ax[0].set_yticks([])
plt.tight_layout()
plt.show()

nn = NeuralNetMLP(n_output=10, n_features=X_train.shape[1], n_hidden=60, l2=0.1, l1=0.1, epochs=5, eta=0.001,
                  alpha=0.001, decrease_const=0.00001, shuffle=True, minibatches=80, random_state=1)
inicio=time()
nn.fit(X_train, y_train, print_progress=True)
final=time()
plt.plot(range(len(nn.cost_)), nn.cost_)
plt.ylim([0, 2000])
plt.ylabel('Cost')
plt.xlabel('Epochs * 50')
plt.tight_layout()
plt.show()

batches = np.array_split(range(len(nn.cost_)), 5)
cost_ary = np.array(nn.cost_)
cost_avgs = [np.mean(cost_ary[i]) for i in batches]

plt.plot(range(len(cost_avgs)), cost_avgs, color='red')
plt.ylim([0, 2000])
plt.ylabel('Cost')
plt.xlabel('Epochs')
plt.tight_layout()
plt.show()

y_train_pred = nn.predict(X_train)
print y_train_pred
print y_train
print y_train.size
print X_train.shape[0]

acc = float(np.sum(y_train == y_train_pred))
acc1 = float(acc / X_train.shape[0])
print('Training accuracy: %.2f%%' % (acc1 * 100))


y_test_pred = nn.predict(X_test)
acc = float(np.sum(y_test == y_test_pred))
acc1 = float(acc /X_test.shape[0])
tiemp = final - inicio
minu=int(tiemp/60)
segund = (tiemp - int(tiemp)) * 100
print('Test accuracy: %.2f%%' % (acc1 * 100))
print "El tiempo de entrenamiento de una neurona es de : ", minu, " minutos y ", int(segund), " segundos"


miscl_img = X_test[y_test != y_test_pred][:25]
correct_lab = y_test[y_test != y_test_pred][:25]
miscl_lab= y_test_pred[y_test != y_test_pred][:25]
fig, ax = plt.subplots(nrows=5, ncols=5, sharex=True,sharey=True,)
ax = ax.flatten()
for i in range(25):
    img = miscl_img[i].reshape(28, 28)
    ax[i].imshow(img, cmap='Greys', interpolation='nearest')
    ax[i].set_title('%d) t: %d p: %d' % (i+1, correct_lab[i], miscl_lab[i]))
ax[0].set_xticks([])
ax[0].set_yticks([])
plt.tight_layout()
plt.show()
